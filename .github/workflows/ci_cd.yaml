name: CI_CD
on: 
  workflow_dispatch: 
    inputs:
      environment:
        description: " Choose dev/test/prod environment"
        required: false
        default: "dev"
  push:
    paths-ignore:
      - .github/workflows/*

env:
  DEPLOY_ENV: dev

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint 
          pip install -r requirements.txt
      - name: Lint
        run: |
          pylint pregnant_pills_app/--max-line-length=88
      - name: Check formatting with Black
        run: |
          black --check pregnant_pills_app/
        

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          pytest
      
  build-push-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker image
        run: |
            docker build -t pregnant-pills-app:latest .
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push Docker image to Docker Hub
        run: |
          docker tag pregnant-pills-app:latest ${{ secrets.DOCKER_USERNAME }}/pregnant-pills-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pregnant-pills-app:latest
      
  terraform_infra:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1


  deploy_kuberntes:
    runs-on: ubuntu-latest

    steps:
      - name: Get code
        uses: actions/checkout@v4

      - name: Install kubectl binary on runner and add to PATH
        uses: azure/setup-kubectl@v4
        with: 
          version: 'v1.29.0'
          # jeśli klaster ma v1.28, to kubectl może być v1.28.x lub v1.29.x.

      - name: Install Kustomize on runner
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Get secrets from Github Secrets
        run: |
          echo "POSTGRES_USER_B64=$(echo -n ${{ secrets.POSTGRES_USER }}| base64)" >> GITHUB_ENV
          echo "POSTGRES_PASS_B64=$(echo -n ${{ secrets.POSTGRES_PASS }} | base64)" >> $GITHUB_ENV
          echo "RDS_USER_B64=$(echo -n ${{ secrets.RDS_USER }}| base64)" >> GITHUB_ENV
          echo "RDS_PASS_B64=$(echo -n ${{ secrets.RDS_PASS }} | base64)" >> $GITHUB_ENV
        # $GITHUB_ENV do ustawiania zmiennych środowiskowych na czas trwania joba

      - name: Apply manifests
        run: |
          kubectl apply -k k8s-preg/overlays/$DEPLOY_ENV